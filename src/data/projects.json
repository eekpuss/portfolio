{
  "projects": [
    {
      "id": 1,
      "title": "Product Counting Automation and Defect Detection",
      "category": "Computer Vision",
      "tech": ["Python", "YOLO", "OpenCV", "TensorFlow"],
      "description": "Developed a real-time computer vision system using YOLO to count pharmaceutical products and detect defects, improving inventory accuracy.",
      "challenge": "Manual counting of pharmaceutical products was time-consuming, error-prone, and required significant human resources. Quality control for defect detection depended entirely on human visual inspection, which was both inconsistent and inefficient.",
      "solution": "Implemented a YOLO-based computer vision system that automatically counts products on the production line in real-time and identifies visual defects. The system was trained on a custom dataset of product images with various lighting conditions and orientations. Built a monitoring dashboard that displays real-time counting statistics and flags potential defects for human verification.",
      "results": "Achieved 98.5% accuracy in product counting, reducing inventory reconciliation time by 75%. The system detected subtle defects that were sometimes missed during manual inspection, improving overall quality control. Delivered ROI within 6 months through labor cost savings and reduced inventory discrepancies.",
      "image": "computer-vision-counting.jpg",
      "date": "March 2025 - April 2025",
      "highlight_value": "98.5%",
      "highlight_label": "Accuracy Rate",
      "github_link": "#",
      "demo_link": "#"
    },
    {
      "id": 2,
      "title": "Predictive Equipment Failure Model",
      "category": "Machine Learning",
      "tech": ["Python", "Scikit-learn", "Pandas", "NumPy"],
      "description": "Developed a machine learning model using Python (Scikit-learn) to predict equipment failures, increasing production uptime by 15%.",
      "challenge": "Production equipment failures were causing significant downtime, resulting in lost productivity and increased costs. Traditional maintenance schedules were inefficient and often resulted in either premature maintenance or equipment failure before scheduled maintenance.",
      "solution": "Created a machine learning model using Random Forest algorithm to analyze historical equipment data, including vibration patterns, temperature readings, and performance metrics. Implemented feature engineering to extract meaningful patterns from raw sensor data and deployed the model to predict potential failures up to 72 hours in advance.",
      "results": "Increased production uptime by 15%, reduced maintenance costs by 22%, and improved overall equipment effectiveness (OEE) by 8%. The model achieved 87% accuracy in predicting equipment failures, allowing for proactive maintenance scheduling.",
      "image": "predictive-model.jpg",
      "date": "March 2024 - December 2024",
      "highlight_value": "15%",
      "highlight_label": "Uptime Increase",
      "github_link": "#",
      "demo_link": "#"
    },
    {
      "id": 3,
      "title": "QA Manufacturing Dashboard",
      "category": "Data Visualization",
      "tech": ["Power BI", "DAX", "SQL", "Excel"],
      "description": "Designed a Power BI dashboard for real-time quality metrics monitoring, reducing QA reporting time by 50%.",
      "challenge": "Quality metrics reporting was manual and time-consuming, requiring data from multiple sources to be compiled into Excel spreadsheets. Reports were generated once every two days, which limited the ability to respond quickly to emerging quality issues.",
      "solution": "Created a Power BI dashboard that automatically pulls data from multiple sources including the production database, equipment sensors, and quality control records. Implemented DAX measures to calculate KPIs including defect rates, compliance percentages, and trend analysis.",
      "results": "Reduced reporting time from 2 days to just 4 hours (50% reduction). Enabled real-time monitoring of quality metrics, allowing for immediate response to quality issues. Improved data visualization made it easier for management to identify trends and make data-driven decisions.",
      "image": "qa-dashboard.jpg",
      "date": "September 2023 - December 2023",
      "highlight_value": "50%",
      "highlight_label": "Time Reduction",
      "github_link": "#",
      "demo_link": "#"
    },
    {
      "id": 4,
      "title": "QA Report Automation Script",
      "category": "Process Automation",
      "tech": ["Python", "Pandas", "Matplotlib", "Automated Reporting"],
      "description": "Created a Python script to automate QA reports, saving 10 hours of manual work weekly and improving consistency.",
      "challenge": "Quality assurance reporting involved repetitive, manual processes that were time-consuming and prone to human error. The team was spending approximately 10 hours per week on manually compiling data, creating charts, and formatting reports.",
      "solution": "Developed a Python script that automatically pulls data from multiple sources, performs necessary calculations, generates visualizations, and compiles everything into a standardized report. The script includes error checking and data validation to ensure accuracy.",
      "results": "Saved approximately 10 hours of manual work weekly, allowing QA personnel to focus on analysis and improvement actions rather than report creation. Improved consistency and reliability of reports with standardized calculations and presentation formats. Reduced the time to generate reports from hours to minutes.",
      "image": "automation-script.jpg",
      "date": "June 2023 - August 2023",
      "highlight_value": "10h",
      "highlight_label": "Weekly Savings",
      "github_link": "#",
      "demo_link": "#"
    },
    {
      "id": 5,
      "title": "Microbiological Data Analysis",
      "category": "Data Analysis",
      "tech": ["Python", "Pandas", "Statistical Analysis", "Visualization"],
      "description": "Performed Python-based microbiological analysis to ensure product compliance with quality standards, achieving a 98% compliance rate.",
      "challenge": "Microbiological testing data was being managed in disparate spreadsheets with inconsistent formats, making trend analysis and compliance reporting difficult. The lack of standardized analysis was hindering the ability to identify patterns and potential contamination sources.",
      "solution": "Developed a comprehensive Python-based analysis system that consolidated microbiological testing data from various sources. Implemented statistical methods to identify trends, outliers, and potential risk areas. Created visualizations that highlighted compliance levels across different production areas and time periods.",
      "results": "Achieved a 98% compliance rate with microbiological standards across all production batches. Identified specific environmental factors correlated with higher microbiological counts, enabling targeted preventive actions. Reduced investigation time for microbiological deviations by 35% through more efficient data analysis.",
      "image": "micro-analysis.jpg",
      "date": "January 2025 - February 2025",
      "highlight_value": "98%",
      "highlight_label": "Compliance Rate",
      "github_link": "#",
      "demo_link": "#"
    },
    {
      "id": 6,
      "title": "Product Quality Data Analysis",
      "category": "Data Analysis",
      "tech": ["Python", "SQL", "Pandas", "Matplotlib"],
      "description": "Analyzed quality data with SQL and Python, reducing defect rates by 10% through actionable insights.",
      "challenge": "The production facility was experiencing higher than industry-average defect rates, but the root causes were unclear. Existing analysis was limited to basic reporting without deeper pattern identification.",
      "solution": "Performed comprehensive analysis of quality data using SQL to extract and clean data from multiple database sources. Used Python for statistical analysis to identify correlations between process parameters and defect rates. Created visualizations to highlight key patterns and presented findings to management team.",
      "results": "Identified three key process parameters that strongly correlated with defect rates. Implementation of recommended process adjustments led to a 10% reduction in overall defect rates within three months. Analysis also revealed optimal operating conditions that were documented in updated standard operating procedures.",
      "image": "quality-analysis.jpg",
      "date": "January 2024 - April 2024",
      "highlight_value": "10%",
      "highlight_label": "Defect Reduction",
      "github_link": "#",
      "demo_link": "#"
    }
  ]
}